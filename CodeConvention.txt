

LuaX	Lexical
LuaY	Parser
LuaK	Code emission

LuaD	Execution

LuaC	Garbage collection
LuaO	Object-related API

LuaF	Function-related API (prototype/closure)
LuaH	Table-related API

LuaS	String-related API
LuaT	Meta-table-related API

LuaL	Util
LuaG	Debug
LuaM	Memory


.........................
LUA碰到函数调用时，此时会生成CALL指令，
至于CALL的对象，则与变量查询方法一致(最后可能会回溯到全局层查询该函数)；
当一个LUA函数执行完毕时，会生成OP_RETURN指令，LUA解释器执行时碰到该指令作相应的处理。   lua在编译完一个LUA文件后，此时生成了一个闭包，如果此时执行该文件，则逐个指令解释并运行
............................


1、local变量赋值，如local a = 1, 当然也包含对local f = functon()....end的处理；
2、普通表达式， 如a = 3 * 4，t["a"] = 5等；
3、function定义(注意这里不以local开头，lua编译器区分对待);
4、其他代码块(block),如for while do if等；
5、其他(非关键不做具体介绍)；
当碰到1类表达式时，此时会更新proto的local变量数信息，会将该变量名也存储在proto的相关数据结构中，方便该proto的下面的代码引用局部变量时，根据名字来索引该变量，同时为该变量分配一个寄存器ID，后续生成机器指令时，均使用ID来访问该局部变量。注意：这里的寄存器ID，每个PROTO开始时都以0开始，当需要新分配寄存器时，ID自增，回收时ID减1即可，lua解释器在执行时，会根据base+ID值来访问变量，而发生函数调用时，base值会调整，因此每个proto可以从0开始计数，其实lua的寄存器指的是lua_state数据结构中的L->base ~ L->top这一块内存区的某个存储slot。
当碰到2类表达式时，先解释变量a，判定其是全局变量、局部变量或外部变量(UPVAL)，然后计算=后的表达式的值，最后生成OP_MOVE指令、OP_SETGLOBAL或OP_SETUPVAL指令等，具体生成指令依据变量索引时找到的是全局变量、局部变量或UPVAL信息。同时计算=后的表达式的值时，也会根据不同情况进行处理，假设如果是代码 a = a * 4，此时也在表达式中访问变量a，根据a的类型生成OP_GETGLOBAL或OP_GETUPVAL等指令。与此同时在计算表达式的值时，很可能需要用到临时变量，临时变量也使用寄存器来存储，当该表达式计算完毕时，将这些临时使用的寄存器释放掉即可(释放即将当前的可分配的寄存器ID做减法)；
当碰到3类表达式时，会生成proto，同时这里会生成一条生成OP_CLOSURE的指令，也就是说，当我们定义local xx = function(a)...end时，变量xx获取到的其实是一个以后续函数对象生成的闭包；
当碰到4类表达式时，会根据条件生成不同的跳转指令，同时if do while for包含的所有指令包含在一个block中，在block中定义的局部变量(会占用寄存器)，在这些block被编译完成后，会释放被再度使用(因此这里面定义的局部变量出了block后会消失)；
